// lib/reportAgent.js - Vercel Serverless Compatible

/**
 * Generate comprehensive report
 */
export async function generateReport(data) {
  try {
    const {
      personas,
      campaign_data,
      research_data,
      validation_details,
      session_id
    } = data;

    const timestamp = new Date().toISOString();
    const reportId = `report_${session_id}_${Date.now()}`;

    // Generate summary
    const summary = generateSummary(data);

    console.log(`Report generated: ${reportId}`);

    return {
      report_id: reportId,
      summary,
      timestamp,
      html_content: generateHTMLSummary(data, reportId)
    };

  } catch (error) {
    console.error('Report generation failed:', error);
    throw error;
  }
}

/**
 * Generate summary statistics
 */
function generateSummary(data) {
  const { personas, campaign_data, research_data } = data;

  return {
    report_id: `summary_${Date.now()}`,
    campaign: {
      case_type: campaign_data.matter,
      target_audience: campaign_data.target_description,
      keywords: campaign_data.keywords
    },
    personas: {
      total_generated: personas.length,
      average_confidence: calculateAverageConfidence(personas),
      age_distribution: analyzeAgeDistribution(personas),
      top_motivations: getTopMotivations(personas),
      common_barriers: getCommonBarriers(personas)
    },
    data_sources: {
      research_available: !!research_data,
      source_count: countDataSources(research_data)
    },
    generation_timestamp: new Date().toISOString()
  };
}

/**
 * Generate HTML summary for email
 */
function generateHTMLSummary(data, reportId) {
  const {
    personas,
    campaign_data,
    research_data,
    timestamp
  } = data;

  return `
<!DOCTYPE html>
<html>
<head>
    <title>Persona Generation Report - ${campaign_data.matter}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #2563eb; color: white; padding: 20px; border-radius: 8px; }
        .summary { background: #f8fafc; padding: 20px; margin: 20px 0; border-radius: 8px; }
        .persona { background: #ecfdf5; padding: 15px; margin: 10px 0; border-radius: 6px; }
        .metric { display: inline-block; background: #10b981; color: white; padding: 5px 10px; border-radius: 15px; margin: 5px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>${campaign_data.matter} - Digital Twin Analysis</h1>
        <p>Generated: ${new Date(timestamp).toLocaleString()}</p>
    </div>

    <div class="summary">
        <h2>ðŸ“Š Summary</h2>
        <span class="metric">${personas.length} Personas Generated</span>
        <span class="metric">${calculateAverageConfidence(personas)}% Avg Confidence</span>
        <span class="metric">${countDataSources(research_data)} Data Sources</span>
    </div>

    <h2>ðŸ“‹ Campaign Details</h2>
    <p><strong>Case Type:</strong> ${campaign_data.matter}</p>
    <p><strong>Target Audience:</strong> ${campaign_data.target_description}</p>
    <p><strong>Keywords:</strong> ${campaign_data.keywords}</p>

    <h2>ðŸ‘¥ Generated Personas</h2>
    ${personas.slice(0, 5).map(persona => `
        <div class="persona">
            <h3>${persona.name}</h3>
            <p><strong>Age:</strong> ${persona.age} | <strong>Confidence:</strong> ${persona.confidence_score || 0}%</p>
            <p><strong>Background:</strong> ${persona.bio}</p>
            <p><strong>Communication Style:</strong> ${persona.communication_style}</p>
        </div>
    `).join('')}

    ${personas.length > 5 ? `<p><em>...and ${personas.length - 5} more personas available in Google Sheets</em></p>` : ''}

    <div class="summary">
        <h3>ðŸ”— Access Your Personas</h3>
        <p><strong>Google Sheets:</strong> <a href="${sheetsUrl}">View All Personas</a></p>
        <p><strong>Chat Interface:</strong> Available at your persona platform</p>
    </div>

    <hr>
    <p><small>Report ID: ${reportId} | Generated by Multi-AI Persona System</small></p>
</body>
</html>`;
}

/**
 * Helper functions
 */
function calculateAverageConfidence(personas) {
  if (!personas.length) return 0;
  const total = personas.reduce((sum, p) => sum + (p.confidence_score || 0), 0);
  return Math.round(total / personas.length);
}

function analyzeAgeDistribution(personas) {
  const ages = personas.map(p => p.age).filter(age => age);
  if (!ages.length) return { min: 0, max: 0, average: 0 };
  
  return {
    min: Math.min(...ages),
    max: Math.max(...ages),
    average: Math.round(ages.reduce((sum, age) => sum + age, 0) / ages.length)
  };
}

function getTopMotivations(personas) {
  const motivationCounts = {};
  personas.forEach(persona => {
    const motivations = Array.isArray(persona.motivations) ? persona.motivations : [persona.motivations];
    motivations.filter(m => m).forEach(motivation => {
      motivationCounts[motivation] = (motivationCounts[motivation] || 0) + 1;
    });
  });

  return Object.entries(motivationCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5)
    .map(([motivation, count]) => ({ motivation, count }));
}

function getCommonBarriers(personas) {
  const barrierCounts = {};
  personas.forEach(persona => {
    const barriers = Array.isArray(persona.barriers) ? persona.barriers : [persona.barriers];
    barriers.filter(b => b).forEach(barrier => {
      barrierCounts[barrier] = (barrierCounts[barrier] || 0) + 1;
    });
  });

  return Object.entries(barrierCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5)
    .map(([barrier, count]) => ({ barrier, count }));
}

function countDataSources(researchData) {
  if (!researchData) return 0;
  let count = 0;
  if (researchData.demographics) count++;
  if (researchData.social_insights) count++;
  if (researchData.legal_trends) count++;
  if (researchData.consumer_behavior) count++;
  return count;
}
